name: CI/CD Pipeline - Uprez IPO Valuation Platform

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: gcr.io
  PROJECT_ID: uprez-production
  CLUSTER_NAME: uprez-cluster
  CLUSTER_ZONE: us-central1-a
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Analysis
  code-analysis:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking with mypy
      run: mypy src/ --ignore-missing-imports --strict-optional
    
    - name: Security scanning with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ --severity-level medium
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: uprez_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run unit tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/uprez_test
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/unit/ -v \
          --cov=src/ \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=95 \
          --junitxml=test-results.xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          test-results.xml
          htmlcov/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: uprez_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/uprez_test
      run: alembic upgrade head
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/uprez_test
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/integration/ -v \
          --junitxml=integration-test-results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: integration-test-results.xml

  # ML Model Tests
  model-tests:
    name: ML Model Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install ML dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-ml.txt
    
    - name: Download test models and data
      run: |
        mkdir -p models/test_models data/test_data
        # In a real scenario, you would download from GCS or artifact registry
        echo "Downloading test models and data..."
    
    - name: Run model validation tests
      run: |
        pytest tests/models/ -v \
          --junitxml=model-test-results.xml
    
    - name: Model performance benchmarks
      run: |
        python tests/performance/model_performance_tests.py
    
    - name: Upload model test results
      uses: actions/upload-artifact@v3
      with:
        name: model-test-results
        path: model-test-results.xml

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
    
    - name: Install dependencies
      run: |
        cd frontend
        yarn install --frozen-lockfile
    
    - name: Run ESLint
      run: |
        cd frontend
        yarn lint
    
    - name: Run TypeScript check
      run: |
        cd frontend
        yarn type-check
    
    - name: Run unit tests
      run: |
        cd frontend
        yarn test --coverage --watchAll=false
    
    - name: Build application
      run: |
        cd frontend
        yarn build
      env:
        NEXT_PUBLIC_API_URL: https://api.uprez.com
        NEXT_PUBLIC_ML_SERVICE_URL: https://ml.uprez.com
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/.next/

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-analysis, unit-tests, integration-tests, model-tests, frontend-tests]
    
    outputs:
      api-image: ${{ steps.api.outputs.image }}
      ml-service-image: ${{ steps.ml-service.outputs.image }}
      frontend-image: ${{ steps.frontend.outputs.image }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Determine version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          VERSION="latest"
        else
          VERSION="${GITHUB_SHA:0:8}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    # Build API Service
    - name: Build API Service Image
      id: api
      run: |
        IMAGE_NAME="${REGISTRY}/${PROJECT_ID}/api-service:${{ steps.version.outputs.version }}"
        docker buildx build \
          --platform linux/amd64 \
          --file docker/api/Dockerfile \
          --tag $IMAGE_NAME \
          --tag "${REGISTRY}/${PROJECT_ID}/api-service:latest" \
          --build-arg VERSION=${{ steps.version.outputs.version }} \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=$GITHUB_SHA \
          --push \
          .
        echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT
    
    # Build ML Service
    - name: Build ML Service Image
      id: ml-service
      run: |
        IMAGE_NAME="${REGISTRY}/${PROJECT_ID}/ml-service:${{ steps.version.outputs.version }}"
        docker buildx build \
          --platform linux/amd64 \
          --file docker/ml-service/Dockerfile \
          --tag $IMAGE_NAME \
          --tag "${REGISTRY}/${PROJECT_ID}/ml-service:latest" \
          --build-arg VERSION=${{ steps.version.outputs.version }} \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=$GITHUB_SHA \
          --push \
          .
        echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT
    
    # Build Frontend
    - name: Build Frontend Image
      id: frontend
      run: |
        IMAGE_NAME="${REGISTRY}/${PROJECT_ID}/frontend-service:${{ steps.version.outputs.version }}"
        docker buildx build \
          --platform linux/amd64 \
          --file docker/frontend/Dockerfile \
          --tag $IMAGE_NAME \
          --tag "${REGISTRY}/${PROJECT_ID}/frontend-service:latest" \
          --build-arg VERSION=${{ steps.version.outputs.version }} \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=$GITHUB_SHA \
          --push \
          frontend/
        echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-images
    
    strategy:
      matrix:
        image: [api-service, ml-service, frontend-service]
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.image }}:${{ needs.build-images.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check for critical vulnerabilities
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/workspace aquasec/trivy:latest \
          image --exit-code 1 --severity HIGH,CRITICAL \
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.image }}:${{ needs.build-images.outputs.version }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.uprez.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $CLUSTER_NAME \
          --zone $CLUSTER_ZONE --project $PROJECT_ID
    
    - name: Deploy to staging
      env:
        VERSION: ${{ needs.build-images.outputs.version }}
        ENVIRONMENT: staging
        DOCKER_REGISTRY: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}
      run: |
        chmod +x scripts/deployment/deploy.sh
        ./scripts/deployment/deploy.sh \
          --environment staging \
          --version $VERSION \
          --skip-tests
    
    - name: Run smoke tests
      run: |
        export SMOKE_TEST_BASE_URL="https://staging.uprez.com"
        pytest tests/smoke/ -v
    
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Staging deployment ${{ job.status }}: ${{ needs.build-images.outputs.version }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install E2E dependencies
      run: |
        cd e2e-tests
        npm install
        npx playwright install --with-deps
    
    - name: Run E2E tests
      env:
        BASE_URL: https://staging.uprez.com
      run: |
        cd e2e-tests
        npx playwright test
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: e2e-tests/test-results/

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run load tests with k6
      uses: grafana/k6-action@v0.3.1
      with:
        filename: tests/performance/load_test.js
      env:
        BASE_URL: https://staging.uprez.com
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: load-test-results.json

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan, e2e-tests, performance-tests]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://uprez.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $CLUSTER_NAME \
          --zone $CLUSTER_ZONE --project $PROJECT_ID
    
    - name: Deploy to production
      env:
        VERSION: ${{ needs.build-images.outputs.version }}
        ENVIRONMENT: production
        DOCKER_REGISTRY: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}
      run: |
        chmod +x scripts/deployment/deploy.sh
        ./scripts/deployment/deploy.sh \
          --environment production \
          --version $VERSION \
          --skip-tests \
          --skip-build
    
    - name: Run production smoke tests
      run: |
        export SMOKE_TEST_BASE_URL="https://uprez.com"
        pytest tests/smoke/ -v
    
    - name: Create GitHub release comment
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createReleaseComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: '🚀 Successfully deployed to production!\n\nVersion: ${{ needs.build-images.outputs.version }}\nEnvironment: Production\nURL: https://uprez.com'
          });
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: '🚀 Production deployment successful: ${{ needs.build-images.outputs.version }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback on Failure
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure() && github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $CLUSTER_NAME \
          --zone $CLUSTER_ZONE --project $PROJECT_ID
    
    - name: Rollback deployment
      run: |
        kubectl rollout undo deployment/api-service -n uprez-production
        kubectl rollout undo deployment/ml-service -n uprez-production
        kubectl rollout undo deployment/frontend-service -n uprez-production
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "channel": "#critical-alerts",
            "attachments": [{
              "color": "danger",
              "title": "🔥 Production Rollback Initiated",
              "text": "Production deployment failed and has been rolled back.",
              "fields": [
                {
                  "title": "Version",
                  "value": "${{ needs.build-images.outputs.version }}",
                  "short": true
                },
                {
                  "title": "Trigger",
                  "value": "Automatic rollback due to deployment failure",
                  "short": true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        # Clean up images older than 7 days
        gcloud container images list-tags ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api-service \
          --filter="timestamp.datetime < -P7D" \
          --format="get(digest)" \
          --limit=10 | \
        xargs -I {} gcloud container images delete ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/api-service@{} --quiet || true
        
        gcloud container images list-tags ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/ml-service \
          --filter="timestamp.datetime < -P7D" \
          --format="get(digest)" \
          --limit=10 | \
        xargs -I {} gcloud container images delete ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/ml-service@{} --quiet || true
        
        gcloud container images list-tags ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/frontend-service \
          --filter="timestamp.datetime < -P7D" \
          --format="get(digest)" \
          --limit=10 | \
        xargs -I {} gcloud container images delete ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/frontend-service@{} --quiet || true