# Multi-stage Docker build for Node.js Backend API
# Optimized for production deployment with security best practices

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install all dependencies (including devDependencies)
RUN --mount=type=cache,target=/root/.npm \
    npm ci && npm cache clean --force

# Copy source code
COPY . .

# Build TypeScript if applicable
RUN if [ -f "tsconfig.json" ]; then npm run build; fi

# Production dependencies stage
FROM node:18-alpine AS deps

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install only production dependencies
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production && npm cache clean --force

# Production stage
FROM node:18-alpine AS production

# Install security updates and required packages
RUN apk update && apk upgrade && apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Create app directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy production dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy built application
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./

# Copy any additional required files
COPY --from=builder /app/src/config ./src/config
COPY --from=builder /app/prisma ./prisma

# Set proper ownership
RUN chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Environment variables
ENV NODE_ENV=production
ENV PORT=8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose port
EXPOSE ${PORT}

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["node", "dist/index.js"]

# Development stage
FROM node:18-alpine AS development

# Install development tools
RUN apk add --no-cache git

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm install

# Copy source code
COPY . .

# Environment variables for development
ENV NODE_ENV=development
ENV PORT=8000

# Expose development port
EXPOSE ${PORT}
EXPOSE 9229

# Start development server with debugging
CMD ["npm", "run", "dev"]

# Testing stage
FROM builder AS testing

WORKDIR /app

# Install testing dependencies
RUN npm ci

# Copy test files
COPY jest.config.js ./
COPY tests/ ./tests/

# Run tests
RUN npm run test

# Security scanning stage
FROM production AS security

USER root

# Install security scanning tools
RUN apk add --no-cache \
    git \
    && npm install -g npm-audit-resolver

# Run security audit
RUN npm audit --audit-level moderate

# Switch back to nodejs user
USER nodejs