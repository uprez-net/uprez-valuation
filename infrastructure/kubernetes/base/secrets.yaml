# Secret Management for IPO Valuation Platform
# Note: In production, use Google Secret Manager or external secret operators
# These are placeholder configurations - actual secrets should never be committed

apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: uprez-valuation
  labels:
    app.kubernetes.io/name: uprez-valuation
    app.kubernetes.io/component: secrets
  annotations:
    secret-manager.gcp/secret-name: "uprez-valuation-secrets"
    secret-manager.gcp/project-id: "PROJECT_ID_PLACEHOLDER"
type: Opaque
stringData:
  # Database credentials (use external secret management in production)
  DB_USER: "PLACEHOLDER_DB_USER"
  DB_PASSWORD: "PLACEHOLDER_DB_PASSWORD"
  
  # JWT Configuration
  JWT_SECRET: "PLACEHOLDER_JWT_SECRET"
  JWT_REFRESH_SECRET: "PLACEHOLDER_JWT_REFRESH_SECRET"
  
  # Redis credentials
  REDIS_PASSWORD: "PLACEHOLDER_REDIS_PASSWORD"
  
  # API Keys
  ALPHA_VANTAGE_API_KEY: "PLACEHOLDER_ALPHA_VANTAGE_KEY"
  YAHOO_FINANCE_API_KEY: "PLACEHOLDER_YAHOO_FINANCE_KEY"
  
  # Email Service
  SMTP_USERNAME: "PLACEHOLDER_SMTP_USERNAME"
  SMTP_PASSWORD: "PLACEHOLDER_SMTP_PASSWORD"
  
  # Encryption Key
  ENCRYPTION_KEY: "PLACEHOLDER_ENCRYPTION_KEY"
  
  # Session Secret
  SESSION_SECRET: "PLACEHOLDER_SESSION_SECRET"

---
# TLS Certificate Secret (managed by cert-manager in production)
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: uprez-valuation
  labels:
    app.kubernetes.io/name: uprez-valuation
    app.kubernetes.io/component: tls
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
type: kubernetes.io/tls
data:
  # Placeholder - cert-manager will populate these
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t

---
# Docker Registry Secret
apiVersion: v1
kind: Secret
metadata:
  name: gcr-secret
  namespace: uprez-valuation
  labels:
    app.kubernetes.io/name: uprez-valuation
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnY3IuaW8iOnsiYXV0aCI6IlBMQUNFSE9MREVSX0FVVEgiLCJ1c2VybmFtZSI6Il9qc29uX2tleSIsInBhc3N3b3JkIjoiUExBQ0VIT0xERVJfUEFTU1dPUkQifX19

---
# Service Account for Workload Identity
apiVersion: v1
kind: ServiceAccount
metadata:
  name: uprez-valuation-sa
  namespace: uprez-valuation
  labels:
    app.kubernetes.io/name: uprez-valuation
    app.kubernetes.io/component: service-account
  annotations:
    iam.gke.io/gcp-service-account: "uprez-valuation@PROJECT_ID_PLACEHOLDER.iam.gserviceaccount.com"
imagePullSecrets:
- name: gcr-secret

---
# External Secret Operator Configuration (if using ESO)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: gcpsm-secret-store
  namespace: uprez-valuation
spec:
  provider:
    gcpsm:
      projectId: "PROJECT_ID_PLACEHOLDER"
      auth:
        workloadIdentity:
          clusterLocation: us-central1
          clusterName: uprez-valuation-cluster
          serviceAccountRef:
            name: uprez-valuation-sa

---
# External Secret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-secret
  namespace: uprez-valuation
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: gcpsm-secret-store
    kind: SecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
  data:
  - secretKey: username
    remoteRef:
      key: db-username
  - secretKey: password
    remoteRef:
      key: db-password
  - secretKey: connection-string
    remoteRef:
      key: db-connection-string

---
# External Secret for API Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-keys-secret
  namespace: uprez-valuation
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: gcpsm-secret-store
    kind: SecretStore
  target:
    name: api-keys
    creationPolicy: Owner
  data:
  - secretKey: alpha-vantage-key
    remoteRef:
      key: alpha-vantage-api-key
  - secretKey: yahoo-finance-key
    remoteRef:
      key: yahoo-finance-api-key
  - secretKey: jwt-secret
    remoteRef:
      key: jwt-secret-key

---
# RBAC for Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: uprez-valuation-role
  namespace: uprez-valuation
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: uprez-valuation-rolebinding
  namespace: uprez-valuation
subjects:
- kind: ServiceAccount
  name: uprez-valuation-sa
  namespace: uprez-valuation
roleRef:
  kind: Role
  name: uprez-valuation-role
  apiGroup: rbac.authorization.k8s.io