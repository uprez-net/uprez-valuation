version: '3.8'

services:
  # Redis for pub/sub and caching
  redis:
    image: redis:7.2-alpine
    container_name: uprez_realtime_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: uprez_realtime_db
    environment:
      POSTGRES_DB: uprez_realtime
      POSTGRES_USER: uprez_user
      POSTGRES_PASSWORD: uprez_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U uprez_user -d uprez_realtime"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Real-time collaboration server
  realtime-server:
    build:
      context: ../../..
      dockerfile: src/realtime/config/Dockerfile
    container_name: uprez_realtime_server
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://uprez_user:uprez_pass@postgres:5432/uprez_realtime
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WS_HOST=0.0.0.0
      - WS_PORT=8000
      - JWT_SECRET_KEY=dev-secret-key-change-in-production
      - WS_MAX_CONNECTIONS_PER_WORKSPACE=100
      - PERF_METRICS_ENABLED=true
      - AUTO_SCALING_ENABLED=false
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ../../..:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: uprez_realtime_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - realtime-server
    restart: unless-stopped
    profiles:
      - production

  # Redis Insight for monitoring (development only)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: uprez_redis_insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - development

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: uprez_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - realtime-server
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: uprez_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
  postgres_data:
  redis_insight_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: uprez_realtime_network