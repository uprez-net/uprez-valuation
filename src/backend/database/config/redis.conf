# =====================================================
# Redis Configuration for IPO Valuation Platform
# Optimized for caching and real-time collaboration
# =====================================================

# =====================================================
# NETWORK AND SECURITY
# =====================================================

# Network configuration
bind 0.0.0.0                              # Listen on all interfaces (use specific IPs in production)
port 6379                                 # Default Redis port
tcp-backlog 511                           # TCP listen backlog
timeout 300                               # Client idle timeout (5 minutes)
tcp-keepalive 60                          # TCP keepalive

# Security
requirepass "your-secure-redis-password"   # Require authentication
# rename-command FLUSHDB ""               # Disable dangerous commands in production
# rename-command FLUSHALL ""
# rename-command CONFIG "CONFIG_abc123"   # Rename CONFIG command
# rename-command SHUTDOWN SHUTDOWN_abc123

# TLS/SSL configuration (uncomment for production)
# tls-port 6380
# tls-cert-file /path/to/redis.crt
# tls-key-file /path/to/redis.key
# tls-ca-cert-file /path/to/ca.crt
# tls-protocols "TLSv1.2 TLSv1.3"

# =====================================================
# MEMORY MANAGEMENT
# =====================================================

# Memory limits and policies
maxmemory 4gb                             # Maximum memory usage (adjust based on available RAM)
maxmemory-policy allkeys-lru              # Evict least recently used keys when memory limit reached
maxmemory-samples 5                       # Samples to check for LRU eviction

# Memory optimization
hash-max-ziplist-entries 512              # Optimize small hashes
hash-max-ziplist-value 64
list-max-ziplist-size -2                  # Optimize small lists
list-compress-depth 0
set-max-intset-entries 512                # Optimize small sets
zset-max-ziplist-entries 128              # Optimize small sorted sets
zset-max-ziplist-value 64

# HyperLogLog optimization
hll-sparse-max-bytes 3000

# Stream optimization
stream-node-max-bytes 4096
stream-node-max-entries 100

# =====================================================
# PERSISTENCE CONFIGURATION
# =====================================================

# RDB (Redis Database) persistence
save 900 1                                # Save if at least 1 key changed in 900 seconds
save 300 10                               # Save if at least 10 keys changed in 300 seconds  
save 60 10000                             # Save if at least 10000 keys changed in 60 seconds
rdbcompression yes                        # Compress RDB files
rdbchecksum yes                           # Checksum RDB files
dbfilename dump.rdb                       # RDB filename
dir /var/lib/redis                        # Directory for persistence files

# AOF (Append Only File) persistence - more durable
appendonly yes                            # Enable AOF
appendfilename "appendonly.aof"           # AOF filename
appendfsync everysec                      # Fsync every second (balance of performance and durability)
no-appendfsync-on-rewrite no              # Don't fsync during rewrites
auto-aof-rewrite-percentage 100           # Rewrite when AOF is 100% larger than last rewrite
auto-aof-rewrite-min-size 64mb            # Minimum size for AOF rewrite

# RDB-AOF hybrid persistence (Redis 4.0+)
aof-use-rdb-preamble yes                  # Use RDB format for AOF rewrite preamble

# =====================================================
# REPLICATION AND HIGH AVAILABILITY
# =====================================================

# Replica configuration (for read replicas)
# replicaof <masterip> <masterport>        # Uncomment to configure as replica
replica-serve-stale-data yes              # Serve stale data when disconnected from master
replica-read-only yes                     # Make replicas read-only
repl-diskless-sync no                     # Use disk-based replication
repl-diskless-sync-delay 5                # Delay for diskless replication
repl-ping-replica-period 10               # Replica ping interval
repl-timeout 60                           # Replication timeout
repl-disable-tcp-nodelay no               # Enable TCP_NODELAY for replication
repl-backlog-size 128mb                   # Replication backlog size
repl-backlog-ttl 3600                     # Backlog TTL (1 hour)

# Sentinel configuration (for automatic failover)
# sentinel monitor mymaster 127.0.0.1 6379 2
# sentinel auth-pass mymaster your-password
# sentinel down-after-milliseconds mymaster 30000
# sentinel parallel-syncs mymaster 1
# sentinel failover-timeout mymaster 180000

# =====================================================
# PERFORMANCE TUNING
# =====================================================

# CPU and threading
# io-threads 4                            # Enable I/O threading (Redis 6+)
# io-threads-do-reads yes

# Slow log configuration
slowlog-log-slower-than 10000            # Log queries slower than 10ms
slowlog-max-len 128                      # Maximum slow log entries

# Client management
maxclients 10000                         # Maximum concurrent clients
timeout 300                              # Client timeout (5 minutes)

# Memory defragmentation (Redis 4.0+)
activedefrag yes                         # Enable active defragmentation
active-defrag-ignore-bytes 100mb         # Minimum fragmentation to start defrag
active-defrag-threshold-lower 10         # Lower threshold for fragmentation
active-defrag-threshold-upper 100        # Upper threshold for fragmentation
active-defrag-cycle-min 1                # Minimal CPU percentage for defrag
active-defrag-cycle-max 25               # Maximum CPU percentage for defrag

# =====================================================
# LOGGING AND MONITORING
# =====================================================

# Logging configuration
loglevel notice                          # Log level (debug, verbose, notice, warning)
logfile "/var/log/redis/redis-server.log" # Log file location
syslog-enabled yes                       # Enable syslog
syslog-ident redis                       # Syslog identity
syslog-facility local0                   # Syslog facility

# Statistics
latency-monitor-threshold 100            # Monitor operations slower than 100ms

# =====================================================
# MODULES AND EXTENSIONS
# =====================================================

# Load Redis modules (uncomment as needed)
# loadmodule /path/to/redisearch.so       # RediSearch for full-text search
# loadmodule /path/to/redistimeseries.so  # RedisTimeSeries for time-series data
# loadmodule /path/to/redisjson.so        # RedisJSON for JSON operations
# loadmodule /path/to/redisbloom.so       # RedisBloom for probabilistic data structures

# =====================================================
# CACHING SPECIFIC OPTIMIZATIONS
# =====================================================

# Optimize for caching workloads
notify-keyspace-events "Ex"              # Enable keyspace notifications for expired keys
lazy-free-lazy-eviction yes              # Use lazy freeing for evicted keys
lazy-free-lazy-expire yes                # Use lazy freeing for expired keys
lazy-free-lazy-server-del yes            # Use lazy freeing for DEL command

# Optimize hash tables
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# =====================================================
# SESSION STORE OPTIMIZATION
# =====================================================

# Optimize for session storage
# Use appropriate data structures:
# - Hashes for session data
# - Sets for active users
# - Sorted sets for leaderboards/rankings
# - Lists for activity feeds
# - Strings for simple counters

# =====================================================
# REAL-TIME FEATURES
# =====================================================

# Pub/Sub configuration
# No specific config needed, but consider:
# - Use Redis Streams for persistent messaging
# - Use Pub/Sub for real-time notifications
# - Monitor pub/sub channels and patterns

# Streams configuration (Redis 5.0+)
# Streams are optimized by default, but consider:
stream-node-max-bytes 4096               # Stream node size
stream-node-max-entries 100              # Entries per stream node

# =====================================================
# BACKUP AND RECOVERY
# =====================================================

# Backup strategy
# 1. Use both RDB and AOF for maximum durability
# 2. Schedule regular RDB backups
# 3. Monitor AOF file size and rewrite frequency
# 4. Test restore procedures regularly

# Snapshot configuration for backups
save 3600 1                              # Hourly backup if any changes
save 1800 100                            # 30-minute backup if 100+ changes
save 900 10000                           # 15-minute backup if 10000+ changes

# =====================================================
# MONITORING AND ALERTING
# =====================================================

# Key metrics to monitor:
# - Memory usage (used_memory, used_memory_peak)
# - CPU usage
# - Keyspace hits/misses ratio
# - Expired/evicted keys
# - Connected clients
# - Operations per second
# - Slow queries
# - Replication lag (if using replicas)

# Enable latency monitoring
latency-monitor-threshold 100            # Monitor commands slower than 100ms

# =====================================================
# SECURITY BEST PRACTICES
# =====================================================

# Network security
# bind 127.0.0.1 10.0.1.4                # Bind to specific IPs only
protected-mode yes                       # Enable protected mode

# Authentication
requirepass "your-very-secure-password"  # Use strong passwords
# masterauth "master-password"           # Password for replica to authenticate with master

# Disable dangerous commands in production
# rename-command FLUSHDB ""
# rename-command FLUSHALL ""
# rename-command DEBUG ""
# rename-command CONFIG ""
# rename-command SHUTDOWN SHUTDOWN_secret_key

# =====================================================
# GCP MEMORYSTORE SPECIFIC SETTINGS
# =====================================================

# When using GCP Memorystore for Redis:
# - Many settings are managed automatically
# - High availability is available
# - Automatic backups and point-in-time recovery
# - VPC native networking
# - IAM integration available
# - Monitoring integrated with Cloud Monitoring

# Memorystore specific considerations:
# - Choose appropriate tier (Basic vs Standard)
# - Standard tier provides HA with automatic failover
# - Transit encryption available
# - Auth is managed through GCP

# =====================================================
# ENVIRONMENT SPECIFIC CONFIGURATIONS
# =====================================================

# Development environment
# - Lower memory limits
# - More verbose logging
# - Disabled persistence for faster testing

# Staging environment  
# - Mirror production settings
# - Enable all monitoring
# - Test backup/restore procedures

# Production environment
# - Enable all security features
# - Optimize for performance
# - Enable comprehensive monitoring
# - Regular backups
# - High availability setup

# =====================================================
# APPLICATION-SPECIFIC OPTIMIZATIONS
# =====================================================

# For IPO Valuation Platform:

# Session management
# - Use hashes for user sessions
# - Set appropriate TTL for sessions
# - Use sets to track active users

# Caching financial data
# - Cache expensive calculations
# - Use appropriate TTL based on data freshness requirements
# - Cache market data with short TTL
# - Cache company data with longer TTL

# Real-time collaboration
# - Use pub/sub for real-time updates
# - Use sets to track active users in workspaces
# - Use lists for activity feeds

# API rate limiting
# - Use string counters with TTL
# - Implement sliding window with sorted sets

# Background job tracking
# - Use hashes to store job status
# - Use sets to track user's active jobs

# Search and autocomplete
# - Use sorted sets for autocomplete
# - Cache search results with appropriate TTL

# Performance monitoring
# - Track API endpoint usage
# - Monitor response times
# - Track error rates

# =====================================================
# MAINTENANCE AND OPERATIONS
# =====================================================

# Regular maintenance tasks:
# 1. Monitor memory usage and adjust maxmemory if needed
# 2. Check slow log regularly
# 3. Monitor keyspace hit ratio
# 4. Backup RDB and AOF files regularly
# 5. Update Redis version for security patches
# 6. Monitor replication lag if using replicas
# 7. Clean up expired keys if needed
# 8. Monitor and optimize hot keys

# Commands for monitoring:
# - INFO memory (memory usage)
# - INFO stats (general statistics)
# - INFO replication (replication status)
# - SLOWLOG GET (slow queries)
# - MONITOR (real-time command monitoring)
# - CLIENT LIST (connected clients)
# - LATENCY LATEST (latency information)